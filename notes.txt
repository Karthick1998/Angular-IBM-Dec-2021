Magesh Kuppan

Schedule
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    No Powerpoint
    100% Handson
    At least 50% of the participants should have completed the assignment in order to proceed to the next topic
    Be prepared to showcase your solution to the assignments
    Feel free to interrupt at any time

About You
    Name
    Total Experience
    Primary Skillset
    Experience in Angular (if any)
    Any books you read / shows / movies you watched / that you DONT want other to watch

What is Angular?
    Framework for RIA (Rich Internet Applications)

Salary Calculator
    Assumptions: 
        Our solution meets 100% of the user requirements
            No validations are required
            NO error messages are required

        The application will be prepared for deployment by another team
            They will refactor the css styles into another .css file
            They will refactor the js code into another .js file

Reactive X Proactive
    Dumb X Having knowledge

Component (View) = Presentation + UI Behavior + Sync the model state changes
Application = Composition of components

ES6 (ECMAScript 6 / ES2015 / ESNext)
    1. let
    2. const
    3. Array destructuring
        var nos = [3,1,4,2,5]
        var [x, y] = nos

    4. Rest operator (array)
        var nos = [3,1,4,2,5]
        var [x,y, ...z]= nos

        function sum(...args){
            let result = 0;
            for (let i=0; i < args.length; i++)
                result += args[i]
            return result;
        }

    5. Spread operator (array)
        var nos = [3,1,4,2,5]
        var newNos = [...nos, 10, 20, 30]

        function sum(...args){
            let result = 0;
            for (let i=0; i < args.length; i++)
                result += args[i]
            return result;
        }
        sum(...nos)

    6. object destructuring
        var product = {
            id : 100,
            name : 'Pen',
            cost : 10
        }
        undefined
        var { id , cost } = product

        var {id : x, cost : y } = product

    7. rest operator (object)
        var product = {
            id : 100,
            name : 'Pen',
            cost : 10
        }
        undefined
        var { id, ...z } = product

    8. spread operator (object)
        var discountedProduct = { ...product, discount : 10 }


Application Setup
    1. Web Server
    2. TypeScript compiler
    3. Unit testing
    4. E2E testing
    5. Test Runner
    6. Code Coverage
    7. Build configuration

Source of State Changes
    1. User interactions -> Events
    2. Timer
    3. Ajax calls

Angular Building Blocks
    1. Component
        View
        Encapsulation of Presentation + UI Behavior + State
    2. Pipe
        Transform the data for presentation purposes
    3. Directive
        DOM manipulation
        Types of Directives
            1. Attribute Directive
                Manipulates the attributes of existing DOM Nodes
                DOES NOT change the structure of DOM tree (by adding / removing dom nodes)
                used with '[]'

            2. Structural Directive
                Changes the structure of the DOM tree (by adding / removing dom nodes)
                used with prefix '*'

    4. Service
        NON UI logic
    5. Module
        Directory of the application entities (Components, Pipes, Directives, Services & Modules)
        There has to be a minimum of 1 module in an application
        The application bootstrapping is by the module

ES6 Modules
    Alternatives (AMD - Asynchronous Module Definition, CommonJS - CommonJS Modules)

    1. Everything defined in a file is considered 'private' to that file
    2. Any entity to be accessible from other files have to be explicitly 'exported'
    3. Any public entity from another file has to be explicitly 'imported' to use

To create a pipe
    Create a class
        Decorate the class with @Pipe decorator
        implement PipeTransform interface
            implement the transform method
        Register the class with the module

Pure functions
    - functions with NO side effects
    - If the invocation of a function can be replaced with the result of a function without any changes in the outcome then the function is said be with NO side effects
    - A pure function will ALWAYS exhibit the same behavior (result) for the same input (arguments)

    Example of a pure function
        function add(x,y){
            return x + y;
        }

        function addClient(){
            const result = add(100,200);
            console.log(`result = ${result}`);
        }

    Example of a non-pure function
        function add(x,y){
            console.log(`processing ${x} and ${y}`) //=> side effect
            return x + y;
        }

        function addClient(){
            const result = add(100,200);
            console.log(`result = ${result}`);
        }

    Side effects
        communication to external resource (console, database, ajax call)
    the function depends on any data that is NOT passed as arguments

Structure and Interpretation of Computer Programs

Memoization
    Technique in which the result of a function is retained and reused

LocalStorage
    window.localStorage
        - key/value store
        - key & value must be strings (use JSON.stringify & JSON.parse for serialization and deserialization)
        - SOP (same origin policy)
        - ~10 MB or storage limit
        - APIs
            - setItem(key, value) => insert & update
            - getItem(key) => value
            - removeItem(key) => delete
            - clear() => delete all
            - key(index) => key @ index
            - lenght => number of items

        creating a bug should save the bug in the storage
        toggling a bug should update the bug in the storage
        removing a bug should remove the bug from the storage
        load the bugs from the storage when the application is loaded in the browser

Adding an external library
    
    Install the external library
        ng add moment 
            OR
        npm install moment

    Importing the external library
        import * as moment from 'moment'
    
    Using the external library
        moment('2021-12-23T07:13:56.390Z').fromNow()


Performation Optimizations
    1. Use 'pure' pipes
    2. Set the changeDetection to 'onPush' in the components

    For the above to be adopted, "Make sure the state changes happen in an immutable manner"