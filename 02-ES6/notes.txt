ES6 (ECMAScript 6 / ES2015 / ESNext)
    1. let
    2. const
    3. Array destructuring
        var nos = [3,1,4,2,5]
        var [x, y] = nos

    4. Rest operator (array)
        var nos = [3,1,4,2,5]
        var [x,y, ...z]= nos

        function sum(...args){
            let result = 0;
            for (let i=0; i < args.length; i++)
                result += args[i]
            return result;
        }

    5. Spread operator (array)
        var nos = [3,1,4,2,5]
        var newNos = [...nos, 10, 20, 30]

        function sum(...args){
            let result = 0;
            for (let i=0; i < args.length; i++)
                result += args[i]
            return result;
        }
        sum(...nos)

    6. object destructuring
        var product = {
            id : 100,
            name : 'Pen',
            cost : 10
        }
        undefined
        var { id , cost } = product

        var {id : x, cost : y } = product

    7. rest operator (object)
        var product = {
            id : 100,
            name : 'Pen',
            cost : 10
        }
        undefined
        var { id, ...z } = product

    8. spread operator (object)
        var discountedProduct = { ...product, discount : 10 }

    9. arrow functions
        /*
        //function statement
        function add(x,y){
            return x + y;
        }

        //function expression
        var add = function(x,y){
            return x + y;
        }

        var add = (x,y) => {
            return x + y;
        }
        */
        var add = (x,y) => x + y;

    10. default parameters
        function add(x = 10,y = 20){
            return x + y;
        }
        add()
       
        add(100)
       
        add(undefined, 200)
       
        add(100,200)

    11. template literals
        var s = `sum of ${x} and ${y} is ${x+y}`

        var s = `sum of
        ${x} and ${y} 
        is ${x+y}`

    12. for of loop
        var nos = [3,1,4,2,5]
        
        for (let no of nos){
            console.log(no)
        }

    13. classes
        class Employee{
            id = 0;
            name = '';
            salary = 0;

            constructor(id, name, salary){
                this.id = id;
                this.name = name;
                this.salary = salary;
            }

            display(){
                return `id = ${this.id}, name = ${this.name}, salary = ${this.salary}`
            }
        }
        
        var emp = new Employee(100, 'Magesh', 10000)

        //Inheritance
        class FullTimeEmployee extends Employee{
            benefits = '';
            constructor(id, name, salary, benefits){
                super(id, name, salary)
                this.benefits = benefits
            }
        }
        
        var fte = new FullTimeEmployee(200, 'Suresh', 20000, 'Good food!')